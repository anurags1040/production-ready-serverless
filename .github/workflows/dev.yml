name: deploy dev

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    # this prevents concurrent builds
    concurrency: dev-environment
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # this is required for authenticating to AWS via the OIDC Provider we set up
    permissions:
      id-token: write
      contents: write

    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.3'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::684212469706:role/GithubActionsRole-arg
          role-session-name: GithubActionsSession

      - name: npm ci
        run: npm ci
  
      - name: terraform init
        run: |
          cd terraform
          terraform init -backend-config=config/dev.backend.hcl

      - name: Run tfsec scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} 
     
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
  
      - name: create temp envrionment "dev-ci"
        run: |
          cd terraform
          terraform workspace list | grep -q 'dev-ci' && terraform workspace select dev-ci || terraform workspace new dev-ci
          terraform output > ../.env
          
      - name: seed test data
        run: |
          node seed-restaurants.mjs
          
      # - name: run integration test
      #   run: npm run test
          
      # - name: run end-to-end tests
      #   run: npm run test:e2e
          
      - name: destroy temp envrionment "dev-ci"
        if: always()
        run: |
          cd terraform
          terraform destroy -auto-approve -var "aws_region=us-east-1" -var "stage_name=dev-ci" -var "service_name=prsls-tf-argsharma"
          terraform workspace select default
          terraform workspace delete dev-ci
          
      - name: deploy to dev
        run: |
          cd terraform
          terraform apply -auto-approve -var "aws_region=us-east-1" -var "stage_name=dev" -var "service_name=prsls-tf-argsharma"
          